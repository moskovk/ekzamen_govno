# 13) Реализовать алгоритм, осуществляющий приведение матрицы
#матрицы к ступенчатому виду с выбором ведущего элемента.

using LinearAlgebra
using PrettyTables

# Функция для приведения матрицы к ступенчатому виду с выбором ведущего элемента
function gaussian_elimination_with_partial_pivoting(A::AbstractMatrix{T}) where T
    n = size(A, 1)
    m = size(A, 2)

    # Создаем копию A, чтобы не изменять оригинальную матрицу
    A = copy(A)

    for k in 1:min(n, m)
        # Найти строку с максимальным элементом в текущем столбце
        max_row = argmax(abs.(A[k:n, k]))[1] + k - 1
        if k != max_row
            A[k, :], A[max_row, :] = A[max_row, :], A[k, :]
        end

        # Приведение элементов ниже текущей строки к нулевым значениям
        for i in k+1:n
            if A[i, k] != 0
                factor = A[i, k] / A[k, k]
                A[i, k:m] -= factor * A[k, k:m]
            end
        end
    end

    return A
end

# Тестирование функции на фиксированной матрице
function test_gaussian_elimination()
    A = [
        4 2 -2;
        -2 -3 1;
        2 1 3
    ]

    println("Original Matrix A:")
    pretty_table(A)

    A_reduced = gaussian_elimination_with_partial_pivoting(A)

    println("Reduced Matrix A (Row Echelon Form):")
    pretty_table(A_reduced)
end

# Запуск теста
test_gaussian_elimination()
